name: Release

defaults:
  run:
    shell: bash

on:
  # Trigger the workflow on the new 'v*' tag created
  push:
    tags:
      - "v*"

jobs:
  create_release:
    name: Create Github Release
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2.3.4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true
          prerelease: false

      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v1
        with:
          name: release_url
          path: release_url.txt

  build_artifact:
    needs: [create_release]
    name: ${{ matrix.os }}/GHC ${{ matrix.ghc }}/${{ github.ref }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        ghc:
          - "8.10.4"
        cabal: ["3.2"]
        include:
          - os: ubuntu-latest
            args: --best --lzma
            strip: false
          - os: macOS-latest
            args: --best
            strip: true
          - os: windows-latest
            args: -9
            strip: false

    steps:
      - name: Check out code
        uses: actions/checkout@v2.3.4

      - name: Set tag name
        uses: olegtarasov/get-tag@v2.1
        id: tag
        with:
          tagRegex: "v(.*)"
          tagRegexGroup: 1

      - name: Setup Haskell
        uses: haskell/actions/setup@v1
        id: setup-haskell-cabal
        with:
          ghc-version: ${{ matrix.ghc }}
          cabal-version: ${{ matrix.cabal }}

      - name: Cache ~/.cabal/store
        uses: actions/cache@v2.1.4
        with:
          path: |
            ~/.cabal/packages
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-${{ matrix.ghc }}

      - name: Build binary
        run: |
          cabal build exe:dg

      - if: matrix.os == 'windows-latest'
        name: Set extension to .exe on Windows
        run: |
          echo "EXT=.exe" >> $GITHUB_ENV

      - name: Set binary path name
        run: |
          echo "BINARY_PATH=$(find dist-newstyle \( -name 'dg' -o -name 'dg.exe' \) -type f)" >> $GITHUB_ENV

      # - name: Compress binaries using UPX
      #   uses: svenstaro/upx-action@v2
      #   with:
      #     file: ${{ env.BINARY_PATH }}
      #     args: ${{ matrix.args }}
      #     strip: ${{ matrix.strip }}

      - name: Load Release URL File from release job
        uses: actions/download-artifact@v2
        with:
          name: release_url

      - name: Get Release File Name & Upload URL
        id: get_release_info
        run: |
          echo "::set-output name=upload_url::$(cat release_url.txt)"

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ${{ env.BINARY_PATH }}
          asset_name: dg-${{ steps.tag.outputs.tag }}-${{ runner.os }}${{ env.EXT }}
          asset_content_type: application/octet-stream
